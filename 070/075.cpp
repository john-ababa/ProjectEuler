/******************************************************************
 * Problem 75 「1通りの整数直角三角形」  
 * 
 * ある長さの鉄線を折り曲げて3辺の長さが整数の直角三角形を作るとき,
 * その方法が1通りしかないような最短の鉄線の長さは12cmである.
 * 他にも沢山の例が挙げられる.
 *   12 cm: (3,4,5)
 *   24 cm: (6,8,10)
 *   30 cm: (5,12,13)
 *   36 cm: (9,12,15)
 *   40 cm: (8,15,17)
 *   48 cm: (12,16,20)
 * それとは対照的に, ある長さの鉄線 (例えば20cm) は3辺の長さが
 * 整数の直角三角形に折り曲げることができない.
 * また2つ以上の折り曲げ方があるものもある.
 * 2つ以上ある例としては, 120cmの長さの鉄線を用いた場合で, 3通りの折り曲げ方がある.
 *   120 cm: (30,40,50), (20,48,52), (24,45,51)
 * Lを鉄線の長さとする. 直角三角形を作るときに1通りの折り曲げ方しか
 * 存在しないような L ≤ 1,500,000 の総数を答えよ.
 * 注: この問題は最近変更されました. あなたが正しいパラメータを使っているか確認してください.
 ******************************************************************/
#include <iostream>
#include <vector>
#include <algorithm>

int GCD(int m, int n)
{
	for (int k = -1; k != 0; ) {
		k = n % m;
		n = m;
		m = k;
	}
	return n;
}

int problem75(void)
{
	const int L = 1500000, L2 = std::sqrt(L/2);
	std::vector<int> vec(L+1, 0);

	for (int m = 2; m <= L2; ++m) {
		for (int n = 1; n < m; ++n) {
			if (((m-n) % 2) == 1 && GCD(m, n) == 1) {
				const int a = m*m-n*n;
				const int b = 2*m*n;
				const int c = m*m+n*n;
				for (int l = a+b+c; l <= L; l += a+b+c)
					vec[l]++;
			}
		}
	}
	return std::count(vec.begin(), vec.end(), 1);
}

int main(void)
{
	std::cout << problem75() << std::endl;
}

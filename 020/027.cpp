//////////////////////////////////////////////////////////////////////
// Problem 27  
// 
// オイラーは以下の二次式を考案している:
// n^2 + n + 41.
// この式は, nを0から39までの連続する整数としたときに40個の素数を生成する.
// しかし, n = 40のとき40^2 + 40 + 41 = 40(40 + 1) + 41となり41で割り切れる.
// また, n = 41のときは41^2 + 41 + 41であり明らかに41で割り切れる.
//
// 計算機を用いて, 二次式 n^2 - 79n + 1601という式が発見できた.
// これはn = 0 から 79 の連続する整数で素数を生成する.
// 係数の積は, -79 * 1601 で -126479である.
//
// さて, |a| < 1000, |b| < 1000 として以下の二次式を考える (ここで|a|は絶対値):
// n^2 + an + b
// n=0から始めて連続する整数で素数を生成したときに最長の長さとなる上の二次式の,
// 係数a, bの積を答えよ.
//////////////////////////////////////////////////////////////////////
#include <iostream>
#include "../common/common.h"

int main(void)
{
	int max[3] = {0, 0, 0};

	for (int a = -999; a < 1000; ++a) {
		for (int b = -999; b < 1000; ++b) {
			int n = 0;
			while (Euler::isPrime(n*n + a*n + b))
				n++;
			if (max[0] < n) {
				max[0] = n;
				max[1] = a;
				max[2] = b;
			}
		}
	}
	std::cout << max[1] * max[2] << std::endl;
}

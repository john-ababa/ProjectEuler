//////////////////////////////////////////////////////////////////////
// Problem 25  
// 
// フィボナッチ数列は以下の漸化式で定義される:
// F(n) = F(n-1) + F(n-2), ただし F(1) = 1, F(2) = 1.
// 最初の12項は以下である.
// * F(1) = 1
// * F(2) = 1
// * F(3) = 2
// * F(4) = 3
// * F(5) = 5
// * F(6) = 8
// * F(7) = 13
// * F(8) = 21
// * F(9) = 34
// * F(10) = 55
// * F(11) = 89
// * F(12) = 144
// 12番目の項, F(12)が3桁になる最初の項である.
// 1000桁になる最初の項の番号を答えよ.
//////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cmath>
#include <assert.h>

int problem25(int keta)
{
	long double a1 = 1, a2 = 1, a3;
	int num = 2;
	do {
		a3 = a1 + a2;
		a1 = a2;
		a2 = a3;
		++num;
	} while ((int)std::log10(a3)+1 < keta);

	return num;
}

int main(void)
{
	assert(problem25(3) == 12);

	std::cout << problem25(1000) << std::endl;
}
